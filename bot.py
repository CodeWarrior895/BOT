import telebot
import firebase_admin
from firebase_admin import credentials, db
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import os





# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

cred = credentials.Certificate("./serviceAccountKey.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': "https://valentine-a2e19-default-rtdb.firebaseio.com/"
})

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
blacklist_session = set()

RULES = """\nüìú *–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*  
1Ô∏è‚É£ –ù–µ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–∏—Ö.  
2Ô∏è‚É£ –ù–µ –ø–∏—Å–∞—Ç—å –≥–∞–¥–æ—Å—Ç–∏, –∞ —Ç–æ–ª—å–∫–æ –ª—é–±–æ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∫–∏.  
3Ô∏è‚É£ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π.  
4Ô∏è‚É£ –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ **–Ω–∞—Å—Ç–æ—è—â–∏–µ –∏ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–º–æ–≥ –µ–≥–æ –Ω–∞–π—Ç–∏.  
"""


def is_blacklisted(user_id):
    blacklist_ref = db.reference("blacklist").get()
    return str(user_id) in blacklist_ref if blacklist_ref else False

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    if is_blacklisted(user_id):
        bot.send_message(user_id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    
    user_data[user_id] = {}
    bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫! {RULES}\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    user_id = message.chat.id
    name = message.text.strip()

    if " " in name:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
        bot.register_next_step_handler(message, get_name)
        return

    user_data[user_id]['name'] = name
    bot.send_message(user_id, "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?")
    bot.register_next_step_handler(message, get_surname)

def get_surname(message):
    user_id = message.chat.id
    surname = message.text.strip()

    if " " in surname:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –§–∞–º–∏–ª–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:")
        bot.register_next_step_handler(message, get_surname)
        return

    user_data[user_id]['surname'] = surname
    bot.send_message(user_id, "–ö–∞–∫–æ–π —É —Ç–µ–±—è –∫–ª–∞—Å—Å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10)")
    bot.register_next_step_handler(message, get_class)


def get_class(message):
    user_id = message.chat.id
    class_num = message.text.strip()

    if not class_num.isdigit():
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10).")
        bot.register_next_step_handler(message, get_class)
        return

    user_data[user_id]['class'] = class_num
    bot.send_message(user_id, "–ö–∞–∫–∞—è –±—É–∫–≤–∞ —É —Ç–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞? (–æ–¥–Ω–∞ –±—É–∫–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ê)")
    bot.register_next_step_handler(message, validate_class_letter)


def validate_class_letter(message):
    user_id = message.chat.id
    class_letter = message.text.strip()
    if len(class_letter) == 1 and class_letter.isalpha():
        user_data[user_id]['class_letter'] = class_letter.upper()
        save_user(user_id, user_data[user_id])
        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.", reply_markup=ReplyKeyboardRemove())
        send_search_button(user_id)
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –±—É–∫–≤—É.")
        bot.register_next_step_handler(message, validate_class_letter)


def save_user(user_id, data):
    ref = db.reference("users")
    ref.child(str(user_id)).set({
        "name": data["name"],
        "surname": data["surname"],
        "class": data["class"],
        "class_letter": data["class_letter"]
    })

def send_search_button(user_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add(KeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    markup.add(KeyboardButton("‚ö† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É"))

    if(str(user_id) == "1413003857"):
        markup.add(KeyboardButton("Blacklist"))
    
    bot.send_message(user_id, "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
@bot.message_handler(func=lambda message: message.text == "‚ö† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É")
def ask_for_complaint(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É:", reply_markup=markup)
    bot.register_next_step_handler(message, save_complaint)

@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_action(message):
    send_search_button(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "Blacklist")
def blacklist(message):
    bot.send_message(message.chat.id, "Blacklist the user:")
    bot.register_next_step_handler(message, blacklist_user)

def blacklist_user(message):
    user_id = message.text.strip()
    ref = db.reference("blacklist")
    ref.child(str(user_id)).set(True)
    blacklist_session.add(user_id)
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
    user_id = message.chat.id
    send_search_button(user_id)

    

def save_complaint(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        send_search_button(message.chat.id)
        return

    user_id = message.chat.id
    if is_blacklisted(user_id):
        bot.send_message(user_id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    complaint_text = message.text
    complaints_ref = db.reference("complaints")
    complaints_ref.push({
        "user_id": user_id,
        "complaint": complaint_text
    })
    bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    send_search_button(user_id)

@bot.message_handler(func=lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def ask_for_class(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10):")
    bot.register_next_step_handler(message, ask_for_class_letter)

@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_search(message):
    send_search_button(message.chat.id)

def ask_for_class_letter(message):
    user_id = message.chat.id
    user_data[user_id] = {'class': message.text}
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê):")
    bot.register_next_step_handler(message, search_users_by_class)

def search_users_by_class(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        send_search_button(message.chat.id)
        return
    
    user_id = message.chat.id
    user_data[user_id]['class_letter'] = message.text.strip().upper()
    class_num = user_data[user_id]['class']
    class_letter = user_data[user_id]['class_letter']

    users_ref = db.reference("users").get()
    if users_ref:
        matching_users = []
        for uid, user_info in users_ref.items():
            if user_info.get("class") == class_num and user_info.get("class_letter").upper() == class_letter:
                matching_users.append((uid, user_info))

        if matching_users:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
            for uid, user_info in matching_users:
                button = KeyboardButton(f"{user_info['name']} {user_info['surname']} ({uid})")
                markup.add(button)
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
            bot.register_next_step_handler(message, ask_for_valentine)
        else:
            bot.send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            send_search_button(user_id)
    else:
        bot.send_message(user_id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è.")
        send_search_button(user_id)

def ask_for_valentine(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        send_search_button(message.chat.id)
        return

    selected_text = message.text
    user_id = message.chat.id
    selected_uid = selected_text.split(" (")[1].rstrip(")") if " (" in selected_text else None
    
    if selected_uid:
        user_data[user_id]['recipient_id'] = selected_uid
        bot.send_message(user_id, "‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É:")
        bot.register_next_step_handler(message, send_valentine)
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        send_search_button(user_id)

def send_valentine(message):
    user_id = message.chat.id
    recipient_id = user_data[user_id].get('recipient_id')
    valentine_text = message.text
    
    if recipient_id:
        bot.send_message(int(recipient_id), """üíå‚ú® –í–∞–º –ø—Ä–∏—à–ª–∞ **–∞–Ω–æ–Ω–∏–º–Ω–∞—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞**! ‚ú®üíå""")
        bot.send_message(int(recipient_id), valentine_text)
        bot.send_message(user_id, "‚úÖ –í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ!")
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    user_id = message.chat.id
    send_search_button(user_id)


if __name__ == "__main__":
    bot.infinity_polling()
