import telebot
import firebase_admin
from firebase_admin import credentials, db
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

cred = credentials.Certificate("./serviceAccountKey.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': "https://valentine-a2e19-default-rtdb.firebaseio.com/"
})

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
blacklist_session = set()

RULES = "\n–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n1) –ù–µ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–∏—Ö\n2) –ù–µ –ø–∏—Å–∞—Ç—å –≥–∞–¥–æ—Å—Ç–∏, –∞ —Ç–æ–ª—å–∫–æ –ª—é–±–æ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∫–∏\n3) –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π\n"

def is_blacklisted(user_id):
    blacklist_ref = db.reference("blacklist").get()
    return str(user_id) in blacklist_ref if blacklist_ref else False

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    if is_blacklisted(user_id):
        bot.send_message(user_id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    
    user_data[user_id] = {}
    bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫! {RULES}\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    user_id = message.chat.id
    user_data[user_id]['name'] = message.text
    bot.send_message(user_id, "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?")
    bot.register_next_step_handler(message, get_surname)

def get_surname(message):
    user_id = message.chat.id
    user_data[user_id]['surname'] = message.text
    bot.send_message(user_id, "–ö–∞–∫–æ–π —É —Ç–µ–±—è –∫–ª–∞—Å—Å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10)")
    bot.register_next_step_handler(message, get_class)

def get_class(message):
    user_id = message.chat.id
    user_data[user_id]['class'] = message.text
    bot.send_message(user_id, "–ö–∞–∫–∞—è –±—É–∫–≤–∞ —É —Ç–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞? (–æ–¥–Ω–∞ –±—É–∫–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ê)")
    bot.register_next_step_handler(message, validate_class_letter)

def validate_class_letter(message):
    user_id = message.chat.id
    class_letter = message.text.strip().upper()
    if len(class_letter) == 1 and class_letter.isalpha():
        user_data[user_id]['class_letter'] = class_letter
        save_user(user_id, user_data[user_id])
        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.", reply_markup=ReplyKeyboardRemove())
        send_search_button(user_id)
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –±—É–∫–≤—É.")
        bot.register_next_step_handler(message, validate_class_letter)

def save_user(user_id, data):
    ref = db.reference("users")
    ref.child(str(user_id)).set({
        "name": data["name"],
        "surname": data["surname"],
        "class": data["class"],
        "class_letter": data["class_letter"]
    })

def send_search_button(user_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add(KeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    markup.add(KeyboardButton("‚ö† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É"))

    if str(user_id) == "1413003857":
        markup.add(KeyboardButton("Blacklist"))
    
    bot.send_message(user_id, "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def ask_for_class(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10):")
    bot.register_next_step_handler(message, ask_for_class_letter)

def ask_for_class_letter(message):
    user_id = message.chat.id
    user_data[user_id] = {'class': message.text}
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê):")
    bot.register_next_step_handler(message, search_users_by_class)

def search_users_by_class(message):
    user_id = message.chat.id
    user_data[user_id]['class_letter'] = message.text.strip().upper()
    class_num = user_data[user_id]['class']
    class_letter = user_data[user_id]['class_letter']

    users_ref = db.reference("users").get()
    if users_ref:
        matching_users = [
            (uid, user_info) for uid, user_info in users_ref.items()
            if user_info.get("class") == class_num and user_info.get("class_letter", "").upper() == class_letter
        ]
        if matching_users:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for uid, user_info in matching_users:
                markup.add(KeyboardButton(f"{user_info['name']} {user_info['surname']} ({uid})"))
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
            bot.register_next_step_handler(message, ask_for_valentine)
        else:
            bot.send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        bot.send_message(user_id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è.")

if __name__ == "__main__":
    bot.infinity_polling()
